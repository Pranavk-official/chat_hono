generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
  schemas  = ["user"]
}

model User {
  id String @id @default(uuid())

  name  String
  email String
  image String?
  role  Role    @default(USER)

  emailVerified Boolean

  sessions Session[]

  createdAt   DateTime
  updatedAt   DateTime
  Group       Group[]
  GroupMember GroupMember[]
  Message     Message[]

  createdGroups Group[] @relation("GroupCreator")

  @@unique([email])
  @@map("user")
  @@schema("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  @@schema("user")
}

model Verification {
  id         String            @id @default(uuid())
  identifier String
  value      String
  scope      VerificationScope
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
  @@schema("user")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean       @default(false)
  createdBy   String
  creator     User          @relation("GroupCreator", fields: [createdBy], references: [id])
  members     GroupMember[]
  messages    Message[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?

  @@schema("user")
}

model GroupMember {
  id       String          @id @default(cuid())
  role     GroupMemberRole @default(MEMBER)
  userId   String
  groupId  String
  user     User            @relation(fields: [userId], references: [id])
  group    Group           @relation(fields: [groupId], references: [id])
  joinedAt DateTime        @default(now())

  @@unique([userId, groupId])
  @@schema("user")
}

model Message {
  id      String      @id @default(cuid())
  content String
  type    MessageType @default(TEXT)

  senderId  String
  groupId   String
  replyToId String?

  replyTo Message?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: Cascade)
  replies Message[] @relation("MessageReplies")

  user        User         @relation(fields: [senderId], references: [id]) // Changed from userId to senderId
  group       Group        @relation(fields: [groupId], references: [id])
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("user")
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  filename   String?
  mimeType   String?
  size       Int?
  metadata   Json? // arbitrary JSON metadata (uploader info, thumbnails, etc.)
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  uploadedBy String? // optional user id who uploaded the attachment
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("attachment")
  @@schema("user")
}

/**
 * Enums
 */

enum VerificationScope {
  SIGNUP
  LOGIN

  @@schema("user")
}

enum Role {
  USER
  ADMIN

  @@schema("user")
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MEMBER

  @@schema("user")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM

  @@schema("user")
}
